{
    "swagger": "2.0",
    "info": {
        "title": "Link Curation API",
        "description": "We support three basic APIs- Questions, Answers and User Account Services",
        "version": "1.0.0"
    },
    "host": "localhost:5000",
    "schemes": [
        "http"
    ],
    "basePath": "/v1",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/user": {
            "put": {
                "summary": "Update user profile",
                "description": "Update user profile details like name of the user, tags and rating. At least one sub-paraneter is required. User needs to be logged in to access this API\n\nExampls:\n- curl -X PUT http://localhost:5000/v1/user -H \"Content-Type: application/json\" -d '{\"name\":\"Nilay Chheda\",\"rating\":5,\"tags\":[\"saam\",\"ulan\"]}'\n- curl -X PUT http://localhost:5000/v1/user -H \"Content-Type: application/json\" -d '{\"name\":\"Karishma Sureka\",\"rating\":5,\"tags\":[\"dbpedia\",\"npg\"]}' \n",
                "parameters": [
                    {
                        "name": "payload",
                        "in": "body",
                        "description": "Input Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPutInputPayload"
                        }
                    }
                ],
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "Updated profile information of user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserPutOutputPayload"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/question": {
            "get": {
                "summary": "Retrieve relevant questions from database",
                "description": "This API retrieves and returns question(s) relevant to user based on user history and parameters. User needs to be logged in to access this API.\n\nExamples: \n- curl -X GET http://localhost:5000/v1/question?stats=True&count=20\n- curl -X GET http://localhost:5000/v1/question?stats=True\n- curl -X GET http://localhost:5000/v1/question?stats=count=20\n",
                "parameters": [
                    {
                        "name": "stats",
                        "in": "query",
                        "description": "Flag to request question stastics in the response.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of questions to be retrieved. Default is 10",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "Question"
                ],
                "responses": {
                    "200": {
                        "description": "An array of questions.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QuestionGetOutputPayload"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create new question(s) in the database",
                "description": "This API is used by external software entity like dedupe to create new questions and post it to the database.\n\nExamples:\n- curl -X POST http://localhost:5000/v1/question -H \"Content-Type: application/json\" -d '{\"count\":1,\"payload\": [{\"uri1\":\"http://vocab.getty.edu/ulan/50001234\",\"uri2\":\"http://edan.si.edu/saam/id/person-institution/1234\",\"dedupe\":{\"ver\":\"1.0\",\"revision\":\"4\",\"score\":\"0.45\"}}] }'\n- curl -X POST http://localhost:5000/v1/question -H \"Content-Type: application/json\" -d '{\"count\":2,\"payload\":[{\"uri1\":\"http://vocab.getty.edu/ulan/50002345\",\"uri2\":\"http://edan.si.edu/saam/id/person-institution/2345\",\"dedupe\":{\"ver\":\"1.0\",\"revision\":\"4\",\"score\":\"0.45\"}},{\"uri1\":\"http://vocab.getty.edu/ulan/50003456\",\"uri2\":\"http://edan.si.edu/saam/id/person-institution/3456\",\"dedupe\":{\"ver\":\"1.0\",\"revision\":\"4\",\"score\":\"0.85\"}}]}'\n",
                "parameters": [
                    {
                        "name": "payload",
                        "in": "body",
                        "description": "Input Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QuestionPostInputPayload"
                        }
                    }
                ],
                "tags": [
                    "Question"
                ],
                "responses": {
                    "200": {
                        "description": "Answers submitted by human curators for Question(s)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QuestionPostOutputPayload"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/answer": {
            "put": {
                "summary": "Submit an answer",
                "description": "Submit human curated answer for a question. Only comment field is optional. User needs to be logged in to access this API.\n\nExamples:\n- curl -X PUT http://localhost:5000/v1/answer -H \"Content-Type: application/json\" -d '{\"qid\":\"570eec1df6bf2d1e58a88477\",\"value\":\"1\",\"comment\":\"Yes left and right entities match.\"}'\n- curl -X PUT http://localhost:5000/v1/answer -H \"Content-Type: application/json\" -d '{\"qid\":\"570eec1df6bf2d1e58a88476\",value\":\"2\",\"comment\":\"No left and right entities do not match\"}' \n- curl -X PUT http://localhost:5000/v1/answer -H \"Content-Type: application/json\" -d '{\"qid\":\"570eec1df6bf2d1e58a88475\",\"value\":\"3\",\"comment\":\"I am not sure if left and right entities match\"}'\n",
                "parameters": [
                    {
                        "name": "payload",
                        "in": "body",
                        "description": "Input Payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AnswerPutInputPayload"
                        }
                    }
                ],
                "tags": [
                    "Answer"
                ],
                "responses": {
                    "200": {
                        "description": "Success Message",
                        "schema": {
                            "$ref": "#/definitions/AnswerPutOutputPayload"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "UserPutInputPayload": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user"
                },
                "rating": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Rating of the user"
                },
                "tags": {
                    "type": "array",
                    "description": "Array of Tags associated with the user",
                    "items": {
                        "type": "string",
                        "description": "Tag name. Currently supporteda are, \"autry\", \"dbpedia\",\"npg\",\"saam\",\"ulan\",\"viaf\""
                    }
                }
            }
        },
        "UserPutOutputPayload": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user"
                },
                "rating": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User rating from 0-5."
                },
                "tags": {
                    "type": "array",
                    "description": "Array of Tags associated with the user",
                    "items": {
                        "type": "string",
                        "description": "Tag name. Currently supporteda are, \"autry\", \"dbpedia\",\"npg\",\"saam\",\"ulan\",\"viaf\""
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username of the user"
                }
            }
        },
        "QuestionGetInputPayload": {
            "properties": {
                "stats": {
                    "type": "boolean",
                    "description": "Flag to request question stastics in the response"
                },
                "bulk": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Limit number of questions returned. Default is 10"
                }
            }
        },
        "QuestionGetOutputPayload": {
            "properties": {
                "Exact_Match": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Exactmatched"
                    }
                },
                "Unmatched": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Unmatched"
                    }
                },
                "qid": {
                    "type": "string",
                    "description": "Unique question ID"
                },
                "stats": {
                    "type": "string",
                    "description": "Returns question statitics if requested in query"
                }
            }
        },
        "Exactmatched": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the property that matched exactly"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the property that matched exactly on both side."
                }
            }
        },
        "Unmatched": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the property."
                },
                "lvalue": {
                    "type": "string",
                    "description": "Value of the property on left side."
                },
                "rvalue": {
                    "type": "string",
                    "description": "Value of the property on right side."
                }
            }
        },
        "QuestionPostInputPayload": {
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Number of questions to be added."
                },
                "payload": {
                    "type": "array",
                    "description": "List of questions to be added.",
                    "items": {
                        "$ref": "#/definitions/questionPayload"
                    }
                }
            }
        },
        "questionPayload": {
            "properties": {
                "uri1": {
                    "type": "string",
                    "description": "One of the URI of a pair of URI. Ordering does not matter."
                },
                "uri2": {
                    "type": "string",
                    "description": "The other URI of a pair of URI. Ordering does not matter."
                },
                "dedeupe": {
                    "type": "array",
                    "description": "List of annotations generated from dedupe.",
                    "items": {
                        "$ref": "#/definitions/dedupe"
                    }
                }
            }
        },
        "dedupe": {
            "properties": {
                "fields": {
                    "type": "array",
                    "description": "List of fields used by dedupe",
                    "items": {
                        "type": "string",
                        "description": "Field name. Few examples are, \"schema:name\", \"schema:birthDate\", \"schema:deathDate\""
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Dedupe version that generated this annotation"
                },
                "linkScore": {
                    "type": "string",
                    "description": "linkScore computed by dedupe for this question"
                }
            }
        },
        "QuestionPostOutputPayload": {
            "properties": {
                "curation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/curation"
                    }
                }
            }
        },
        "curation": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "comment added with this decision value"
                },
                "value": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Decision value from 1 to 3"
                }
            }
        },
        "AnswerPutInputPayload": {
            "properties": {
                "qid": {
                    "type": "string",
                    "description": "qid of a question being answered"
                },
                "value": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Decision value from 1 to 3"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment related to decision"
                }
            }
        },
        "AnswerPutOutputPayload": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Message indicating that answer was submitted successfully"
                }
            }
        },
        "Error": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Error description"
                }
            }
        }
    }
}